Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/include -O3 -xBROADWELL -restrict -qopt-report=5 -qopt-report-phase=vec -lm -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib -lmpifort -lmpi -ldl -lrt -lpthread

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(450,3) inlined into d2q9-bgk.c(137,3)
   remark #15389: vectorization support: reference rank_p->start_row[r] has unaligned access   [ d2q9-bgk.c(452,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <rank_p->start_row[r]>, stride is 2   [ d2q9-bgk.c(452,5) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <rank_p->end_row[r]>, stride is 2   [ d2q9-bgk.c(453,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 8.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(450,3) inlined into d2q9-bgk.c(137,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(459,5) inlined into d2q9-bgk.c(137,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between shift (461:7) and shift (465:9)
   remark #15346: vector dependence: assumed FLOW dependence between shift (465:9) and shift (461:7)
   remark #15346: vector dependence: assumed ANTI dependence between shift (461:7) and shift (465:9)
LOOP END

LOOP BEGIN at d2q9-bgk.c(459,5) inlined into d2q9-bgk.c(137,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(867,3) inlined into d2q9-bgk.c(137,3)
   remark #15316: simd loop was not vectorized: scalar assignment in simd loop is prohibited, consider private, lastprivate or reduction clauses   [ d2q9-bgk.c(891,11) ]
   remark #15552: loop was not vectorized with "simd"
   remark #15451: unmasked unaligned unit stride stores: 9 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 46 
   remark #15477: vector cost: 6.750 
   remark #15478: estimated potential speedup: 5.420 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at d2q9-bgk.c(869,5) inlined into d2q9-bgk.c(137,3)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(872,9) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(874,9) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(875,9) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(876,9) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(877,9) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(880,9) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(881,9) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(882,9) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(883,9) ]
      remark #15389: vectorization support: reference obstacles[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(888,11) ]
      remark #15388: vectorization support: reference acc_obstacles[ii] has aligned access   [ d2q9-bgk.c(891,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.678
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 48 
      remark #15477: vector cost: 7.370 
      remark #15478: estimated potential speedup: 5.960 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(869,5) inlined into d2q9-bgk.c(137,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(869,5) inlined into d2q9-bgk.c(137,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(869,5) inlined into d2q9-bgk.c(137,3)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(872,9) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(874,9) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(875,9) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(876,9) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(877,9) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(880,9) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(881,9) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(882,9) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(883,9) ]
      remark #15389: vectorization support: reference obstacles[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(888,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.870
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 46 
      remark #15477: vector cost: 6.750 
      remark #15478: estimated potential speedup: 5.420 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(869,5) inlined into d2q9-bgk.c(137,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(908,3) inlined into d2q9-bgk.c(137,3)
   remark #15523: loop was not vectorized: loop control variable tot_obs was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at d2q9-bgk.c(190,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at d2q9-bgk.c(219,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sendbuf1[i] (221:11) and cells->speed8[i+params.nx] (227:11)
      remark #15346: vector dependence: assumed ANTI dependence between cells->speed8[i+params.nx] (227:11) and sendbuf1[i] (221:11)
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(232,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sendbuf1[i] (234:11) and cells->speed8[i+params.nx] (236:11)
      remark #15346: vector dependence: assumed ANTI dependence between cells->speed8[i+params.nx] (236:11) and sendbuf1[i] (234:11)
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(232,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(271,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sendbuf2[i] (273:11) and cells->speed8[i+(work_rows+1)*params.nx] (279:11)
      remark #15346: vector dependence: assumed ANTI dependence between cells->speed8[i+(work_rows+1)*params.nx] (279:11) and sendbuf2[i] (273:11)
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(283,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sendbuf2[i] (285:11) and cells->speed6[i+(work_rows+1)*params.nx] (287:11)
      remark #15346: vector dependence: assumed ANTI dependence between cells->speed6[i+(work_rows+1)*params.nx] (287:11) and sendbuf2[i] (285:11)
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(283,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(298,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between cells->speed1[i+(work_rows+2)*params.nx] (301:11) and recbuf2[i+params.nx*6] (324:11)
      remark #15346: vector dependence: assumed ANTI dependence between recbuf2[i+params.nx*6] (324:11) and cells->speed1[i+(work_rows+2)*params.nx] (301:11)
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(298,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between cells->speed1[i+(work_rows+2)*params.nx] (301:11) and recbuf2[i+params.nx*2] (328:11)
      remark #15346: vector dependence: assumed ANTI dependence between recbuf2[i+params.nx*2] (328:11) and cells->speed1[i+(work_rows+2)*params.nx] (301:11)
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(298,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between cells->speed4[i+(work_rows+2)*params.nx] (309:11) and recbuf2[i+params.nx*2] (328:11)
      remark #15346: vector dependence: assumed ANTI dependence between recbuf2[i+params.nx*2] (328:11) and cells->speed4[i+(work_rows+2)*params.nx] (309:11)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(379,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between obs_sum (383:5) and obs_sum (385:5)
   remark #15346: vector dependence: assumed FLOW dependence between obs_sum (385:5) and obs_sum (383:5)
LOOP END

LOOP BEGIN at d2q9-bgk.c(685,3) inlined into d2q9-bgk.c(419,43)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
   remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
   remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
   remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)

   LOOP BEGIN at d2q9-bgk.c(688,5) inlined into d2q9-bgk.c(419,43)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1029,3) inlined into d2q9-bgk.c(428,5)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1077,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7)

   LOOP BEGIN at d2q9-bgk.c(1031,5) inlined into d2q9-bgk.c(428,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1077,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (1035:9) and jj_offset (1051:51)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (1051:51) and jj_offset (1035:9)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (1051:51) and jj_offset (1035:9)
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (1035:9) and jj_offset (1051:51)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1090,3) inlined into d2q9-bgk.c(428,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1092,5) ]
LOOP END
===========================================================================

Begin optimization report for: collision(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, rank_props *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(569,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(586,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(586,5)
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(591,31) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(592,31) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(594,31) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(595,31) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(597,31) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(598,31) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(605,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(606,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(607,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(608,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(609,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(610,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(611,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(612,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(653,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(654,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(655,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(656,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(657,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(658,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(659,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(660,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(661,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(605,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(606,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(607,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(608,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(609,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(610,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(611,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(612,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(654,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(655,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(656,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(657,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(658,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(659,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(660,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(661,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is conditional   [ d2q9-bgk.c(593,31) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is conditional   [ d2q9-bgk.c(596,31) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is conditional   [ d2q9-bgk.c(599,31) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.281
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(544,15) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 23 
      remark #15451: unmasked unaligned unit stride stores: 16 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 297 
      remark #15477: vector cost: 81.000 
      remark #15478: estimated potential speedup: 3.290 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(586,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, rank_props *, int, int, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(512,3)
   remark #15388: vectorization support: reference cells->speed1[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(519,7) ]
   remark #15388: vectorization support: reference cells->speed1[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(519,7) ]
   remark #15388: vectorization support: reference cells->speed5[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(520,7) ]
   remark #15388: vectorization support: reference cells->speed5[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(520,7) ]
   remark #15388: vectorization support: reference cells->speed8[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(521,7) ]
   remark #15388: vectorization support: reference cells->speed8[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(521,7) ]
   remark #15388: vectorization support: reference cells->speed3[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(523,7) ]
   remark #15388: vectorization support: reference cells->speed3[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(523,7) ]
   remark #15388: vectorization support: reference cells->speed6[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(524,7) ]
   remark #15388: vectorization support: reference cells->speed6[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(524,7) ]
   remark #15388: vectorization support: reference cells->speed7[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(525,7) ]
   remark #15388: vectorization support: reference cells->speed7[ii+(jj+1)*params.nx] has aligned access   [ d2q9-bgk.c(525,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(512,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: get_rank_sizes(const int, const int, const int, rank_props *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(450,3)
   remark #15389: vectorization support: reference rank_work->start_row[r] has unaligned access   [ d2q9-bgk.c(452,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <rank_work->start_row[r]>, stride is 2   [ d2q9-bgk.c(452,5) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <rank_work->end_row[r]>, stride is 2   [ d2q9-bgk.c(453,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 6.160 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(450,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(459,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between shift (461:7) and shift (465:9)
   remark #15346: vector dependence: assumed FLOW dependence between shift (465:9) and shift (461:7)
   remark #15346: vector dependence: assumed ANTI dependence between shift (461:7) and shift (465:9)
LOOP END

LOOP BEGIN at d2q9-bgk.c(459,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, float *__restrict__, int *__restrict__, rank_props *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(685,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
   remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
   remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
   remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)

   LOOP BEGIN at d2q9-bgk.c(688,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, float *__restrict__, int *__restrict__, rank_props *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(685,3) inlined into d2q9-bgk.c(981,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
   remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
   remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
   remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)

   LOOP BEGIN at d2q9-bgk.c(688,5) inlined into d2q9-bgk.c(981,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (704:51) and jj_offset (693:9)
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (693:9) and jj_offset (704:51)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(988,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(990,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(990,5)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(992,16) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(993,16) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(994,16) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(995,16) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(996,16) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(997,16) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(998,16) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(999,16) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1000,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(986,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(990,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(992,16) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(993,16) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(994,16) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(995,16) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(996,16) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(997,16) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(998,16) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(999,16) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1000,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(986,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(990,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, float *__restrict__, int *__restrict__, float *, rank_props *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(1029,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1077,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1077:7)

   LOOP BEGIN at d2q9-bgk.c(1031,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1077,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (1035:9) and jj_offset (1051:51)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (1051:51) and jj_offset (1035:9)
      remark #15346: vector dependence: assumed ANTI dependence between jj_offset (1051:51) and jj_offset (1035:9)
      remark #15346: vector dependence: assumed FLOW dependence between jj_offset (1035:9) and jj_offset (1051:51)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1090,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1092,5) ]
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *__restrict__, const char *__restrict__, t_param *, t_speed **__restrict__, float **__restrict__, t_speed **__restrict__, float **__restrict__, int **__restrict__, float **__restrict__, rank_props *__restrict__, int, int, int *, int **__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(450,3) inlined into d2q9-bgk.c(810,3)
   remark #15389: vectorization support: reference rank_p->start_row[r] has unaligned access   [ d2q9-bgk.c(452,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <rank_p->start_row[r]>, stride is 2   [ d2q9-bgk.c(452,5) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <rank_p->end_row[r]>, stride is 2   [ d2q9-bgk.c(453,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 6.160 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(450,3) inlined into d2q9-bgk.c(810,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(459,5) inlined into d2q9-bgk.c(810,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between shift (461:7) and shift (465:9)
   remark #15346: vector dependence: assumed FLOW dependence between shift (465:9) and shift (461:7)
   remark #15346: vector dependence: assumed ANTI dependence between shift (461:7) and shift (465:9)
LOOP END

LOOP BEGIN at d2q9-bgk.c(459,5) inlined into d2q9-bgk.c(810,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(867,3)
   remark #15316: simd loop was not vectorized: scalar assignment in simd loop is prohibited, consider private, lastprivate or reduction clauses   [ d2q9-bgk.c(891,11) ]
   remark #15552: loop was not vectorized with "simd"

   LOOP BEGIN at d2q9-bgk.c(869,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speed0 (872:9) and *cells_ptr->speed8[ii+jj*params->nx] (883:9)
      remark #15346: vector dependence: assumed FLOW dependence between *cells_ptr->speed8[ii+jj*params->nx] (883:9) and *cells_ptr->speed0 (872:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(908,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
