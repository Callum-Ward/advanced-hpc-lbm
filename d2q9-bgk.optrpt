Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -O3 -xBROADWELL -qopt-report=5 -qopt-report-phase=vec -restrict -lm -o d2q9-bgk

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(498,5) inlined into d2q9-bgk.c(156,3)
   remark #15527: loop was not vectorized: function call to aligned_alloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(498,35) ]
LOOP END

LOOP BEGIN at d2q9-bgk.c(512,5) inlined into d2q9-bgk.c(156,3)
   remark #15527: loop was not vectorized: function call to aligned_alloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(512,39) ]
LOOP END

LOOP BEGIN at d2q9-bgk.c(533,3) inlined into d2q9-bgk.c(156,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(533,3) inlined into d2q9-bgk.c(156,3)
   remark #15389: vectorization support: reference cells->speed0[index] has unaligned access   [ d2q9-bgk.c(536,7) ]
   remark #15389: vectorization support: reference cells->speed1[index] has unaligned access   [ d2q9-bgk.c(538,7) ]
   remark #15389: vectorization support: reference cells->speed2[index] has unaligned access   [ d2q9-bgk.c(539,7) ]
   remark #15389: vectorization support: reference cells->speed3[index] has unaligned access   [ d2q9-bgk.c(540,7) ]
   remark #15389: vectorization support: reference cells->speed4[index] has unaligned access   [ d2q9-bgk.c(541,7) ]
   remark #15389: vectorization support: reference cells->speed5[index] has unaligned access   [ d2q9-bgk.c(544,7) ]
   remark #15389: vectorization support: reference cells->speed6[index] has unaligned access   [ d2q9-bgk.c(545,7) ]
   remark #15389: vectorization support: reference cells->speed7[index] has unaligned access   [ d2q9-bgk.c(546,7) ]
   remark #15389: vectorization support: reference cells->speed8[index] has unaligned access   [ d2q9-bgk.c(547,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 9 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 5.370 
   remark #15478: estimated potential speedup: 4.860 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(533,3) inlined into d2q9-bgk.c(156,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(566,3) inlined into d2q9-bgk.c(156,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(162,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(222,3) inlined into d2q9-bgk.c(164,19)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(222,3) inlined into d2q9-bgk.c(164,19)
      remark #15389: vectorization support: reference *(cells->speed1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(232,7) ]
      remark #15389: vectorization support: reference *(cells->speed1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(232,7) ]
      remark #15389: vectorization support: reference *(cells->speed5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(233,7) ]
      remark #15389: vectorization support: reference *(cells->speed5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(233,7) ]
      remark #15389: vectorization support: reference *(cells->speed8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(234,7) ]
      remark #15389: vectorization support: reference *(cells->speed8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(234,7) ]
      remark #15389: vectorization support: reference *(cells->speed3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(236,7) ]
      remark #15389: vectorization support: reference *(cells->speed3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(236,7) ]
      remark #15389: vectorization support: reference *(cells->speed6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(237,7) ]
      remark #15389: vectorization support: reference *(cells->speed6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(237,7) ]
      remark #15389: vectorization support: reference *(cells->speed7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(238,7) ]
      remark #15389: vectorization support: reference *(cells->speed7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(238,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.203
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 9 
      remark #15457: masked unaligned unit stride stores: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 38 
      remark #15477: vector cost: 47.370 
      remark #15478: estimated potential speedup: 0.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(222,3) inlined into d2q9-bgk.c(164,19)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3) inlined into d2q9-bgk.c(189,41)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3) inlined into d2q9-bgk.c(189,41)
   remark #15389: vectorization support: reference cells->speed0[index] has unaligned access   [ d2q9-bgk.c(399,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(400,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(401,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(402,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(403,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(404,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(405,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(406,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(407,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,20) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,43) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,66) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,90) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,113) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,136) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,20) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,43) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,66) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,90) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,113) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,136) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.628
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(386,17) ]
   remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(385,19) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 21 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 107 
   remark #15477: vector cost: 28.870 
   remark #15478: estimated potential speedup: 3.290 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3) inlined into d2q9-bgk.c(189,41)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(684,3) inlined into d2q9-bgk.c(194,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(732,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7)

   LOOP BEGIN at d2q9-bgk.c(686,5) inlined into d2q9-bgk.c(194,3)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(732,7) ]
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(745,3) inlined into d2q9-bgk.c(194,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(747,5) ]
LOOP END
===========================================================================

Begin optimization report for: collision(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(289,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,5)
   remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(301,31) ]
   remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(302,31) ]
   remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(304,31) ]
   remark #15388: vectorization support: reference cells->speed0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(305,31) ]
   remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(307,31) ]
   remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(308,31) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(314,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(315,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(316,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(317,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(318,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(319,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(320,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(321,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(358,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(359,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(360,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(361,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(362,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(363,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(364,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(365,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(366,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(314,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(315,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(316,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(317,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(318,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(319,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(320,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(321,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(359,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(360,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(361,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(362,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(363,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(364,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(365,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(366,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is conditional   [ d2q9-bgk.c(303,31) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is conditional   [ d2q9-bgk.c(306,31) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is conditional   [ d2q9-bgk.c(309,31) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.257
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(259,15) ]
   remark #15355: vectorization support: tot_cells is uint type reduction   [ d2q9-bgk.c(260,26) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 23 
   remark #15451: unmasked unaligned unit stride stores: 16 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 305 
   remark #15477: vector cost: 94.750 
   remark #15478: estimated potential speedup: 2.930 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,5)
   remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(301,31) ]
   remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(302,31) ]
   remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(304,31) ]
   remark #15388: vectorization support: reference cells->speed0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(305,31) ]
   remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(307,31) ]
   remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(308,31) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(314,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(315,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(316,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(317,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(318,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(319,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(320,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(321,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(358,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(359,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(360,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(361,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(362,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(363,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(364,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(365,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(366,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(314,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(315,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(316,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(317,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(318,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(319,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(320,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(321,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(359,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(360,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(361,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(362,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(363,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(364,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(365,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(366,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is conditional   [ d2q9-bgk.c(303,31) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is conditional   [ d2q9-bgk.c(306,31) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is conditional   [ d2q9-bgk.c(309,31) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.258
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(259,15) ]
   remark #15355: vectorization support: tot_cells is uint type reduction   [ d2q9-bgk.c(260,26) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 23 
   remark #15451: unmasked unaligned unit stride stores: 16 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 306 
   remark #15477: vector cost: 94.870 
   remark #15478: estimated potential speedup: 2.940 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(286,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(289,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(289,5)
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(301,31) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(302,31) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(304,31) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(305,31) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(307,31) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(308,31) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(314,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(315,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(316,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(317,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(318,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(319,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(320,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(321,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(358,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(359,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(360,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(361,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(362,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(363,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(364,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(365,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(366,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(314,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(315,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(316,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(317,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(318,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(319,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(320,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(321,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(359,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(360,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(361,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(362,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(363,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(364,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(365,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(366,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is conditional   [ d2q9-bgk.c(303,31) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is conditional   [ d2q9-bgk.c(306,31) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is conditional   [ d2q9-bgk.c(309,31) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.270
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(259,15) ]
      remark #15355: vectorization support: tot_cells is uint type reduction   [ d2q9-bgk.c(260,26) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 23 
      remark #15451: unmasked unaligned unit stride stores: 16 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 305 
      remark #15477: vector cost: 94.750 
      remark #15478: estimated potential speedup: 2.930 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(289,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(289,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(289,5)
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(301,31) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(302,31) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(304,31) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(305,31) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(307,31) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(308,31) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(314,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(315,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(316,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(317,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(318,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(319,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(320,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(321,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(358,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(359,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(360,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(361,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(362,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(363,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(364,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(365,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(366,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(314,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(315,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(316,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(317,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(318,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(319,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(320,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(321,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(359,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(360,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(361,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(362,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(363,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(364,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(365,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(366,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is conditional   [ d2q9-bgk.c(303,31) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is conditional   [ d2q9-bgk.c(306,31) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is conditional   [ d2q9-bgk.c(309,31) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.271
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(259,15) ]
      remark #15355: vectorization support: tot_cells is uint type reduction   [ d2q9-bgk.c(260,26) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 23 
      remark #15451: unmasked unaligned unit stride stores: 16 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 306 
      remark #15477: vector cost: 94.870 
      remark #15478: estimated potential speedup: 2.940 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(289,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(283:31)::collision:  Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(222,3) inlined into d2q9-bgk.c(204,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(222,3) inlined into d2q9-bgk.c(204,3)
   remark #15389: vectorization support: reference *(cells->speed1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(232,7) ]
   remark #15389: vectorization support: reference *(cells->speed1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(232,7) ]
   remark #15389: vectorization support: reference *(cells->speed5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(233,7) ]
   remark #15389: vectorization support: reference *(cells->speed5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(233,7) ]
   remark #15389: vectorization support: reference *(cells->speed8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(234,7) ]
   remark #15389: vectorization support: reference *(cells->speed8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(234,7) ]
   remark #15389: vectorization support: reference *(cells->speed3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(236,7) ]
   remark #15389: vectorization support: reference *(cells->speed3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(236,7) ]
   remark #15389: vectorization support: reference *(cells->speed6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(237,7) ]
   remark #15389: vectorization support: reference *(cells->speed6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(237,7) ]
   remark #15389: vectorization support: reference *(cells->speed7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(238,7) ]
   remark #15389: vectorization support: reference *(cells->speed7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(238,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 47.370 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(222,3) inlined into d2q9-bgk.c(204,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(222,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(222,3)
   remark #15389: vectorization support: reference *(cells->speed1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(232,7) ]
   remark #15389: vectorization support: reference *(cells->speed1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(232,7) ]
   remark #15389: vectorization support: reference *(cells->speed5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(233,7) ]
   remark #15389: vectorization support: reference *(cells->speed5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(233,7) ]
   remark #15389: vectorization support: reference *(cells->speed8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(234,7) ]
   remark #15389: vectorization support: reference *(cells->speed8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(234,7) ]
   remark #15389: vectorization support: reference *(cells->speed3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(236,7) ]
   remark #15389: vectorization support: reference *(cells->speed3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(236,7) ]
   remark #15389: vectorization support: reference *(cells->speed6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(237,7) ]
   remark #15389: vectorization support: reference *(cells->speed6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(237,7) ]
   remark #15389: vectorization support: reference *(cells->speed7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(238,7) ]
   remark #15389: vectorization support: reference *(cells->speed7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(238,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 47.370 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(222,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(390,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3)
   remark #15389: vectorization support: reference cells->speed0[index] has unaligned access   [ d2q9-bgk.c(399,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(400,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(401,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(402,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(403,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(404,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(405,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(406,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(407,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,20) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,43) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,66) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,90) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,113) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,136) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,20) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,43) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,66) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,90) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,113) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,136) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.628
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(386,17) ]
   remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(385,19) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 21 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 107 
   remark #15477: vector cost: 28.870 
   remark #15478: estimated potential speedup: 3.290 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(390,3) inlined into d2q9-bgk.c(641,10)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3) inlined into d2q9-bgk.c(641,10)
   remark #15389: vectorization support: reference cells->speed0[index] has unaligned access   [ d2q9-bgk.c(399,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(400,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(401,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(402,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(403,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(404,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(405,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(406,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(407,24) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,20) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,43) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,66) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,90) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,113) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(411,136) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,20) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,43) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,66) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,90) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,113) ]
   remark #15389: vectorization support: reference *(local_density+index*4) has unaligned access   [ d2q9-bgk.c(413,136) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.628
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(386,17) ]
   remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(385,19) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 21 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 107 
   remark #15477: vector cost: 28.870 
   remark #15478: estimated potential speedup: 3.290 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,3) inlined into d2q9-bgk.c(641,10)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(648,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(650,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(650,5)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(652,15) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(653,15) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(654,15) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(655,15) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(656,15) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(657,15) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(658,15) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(659,15) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(660,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(646,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(650,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(652,15) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(653,15) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(654,15) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(655,15) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(656,15) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(657,15) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(658,15) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(659,15) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(660,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(646,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(650,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *__restrict__, int *__restrict__, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(684,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(732,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (732:7)

   LOOP BEGIN at d2q9-bgk.c(686,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(732,7) ]
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(745,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(747,5) ]
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *__restrict__, const char *__restrict__, t_param *, t_speed **__restrict__, t_speed **__restrict__, int **__restrict__, float **__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(533,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(533,3)
   remark #15389: vectorization support: reference *cells_ptr->speed0[index] has unaligned access   [ d2q9-bgk.c(536,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed1[index] has unaligned access   [ d2q9-bgk.c(538,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed2[index] has unaligned access   [ d2q9-bgk.c(539,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed3[index] has unaligned access   [ d2q9-bgk.c(540,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed4[index] has unaligned access   [ d2q9-bgk.c(541,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed5[index] has unaligned access   [ d2q9-bgk.c(544,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed6[index] has unaligned access   [ d2q9-bgk.c(545,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed7[index] has unaligned access   [ d2q9-bgk.c(546,7) ]
   remark #15389: vectorization support: reference *cells_ptr->speed8[index] has unaligned access   [ d2q9-bgk.c(547,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 9 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 5.370 
   remark #15478: estimated potential speedup: 4.860 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(533,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(566,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
